package shannon

import (
	"testing"
	"github.com/stretchr/testify/assert"
)

var key = []byte{0x65,0x87,0xd8,0x8f,0x6c,0x32,0x9d,0x8a,0xe4,0x6b}

func TestShannonCreate(t *testing.T) {
	assert := assert.New(t)
	s := ShannonNew(key)
	assert.NotNil(s)
}

func TestShannon_Encrypt(t *testing.T) {
	assert := assert.New(t)
	plaintext := []byte("Hello World")
	s := ShannonNew(key)
	s.Encrypt(plaintext)
	assert.Equal([]byte{0x9b, 0x1a, 0x9f, 0xd4, 0xd9, 0x80, 0x33, 0xf0, 0xde, 0x6d, 0xd1}, plaintext)

}

func TestShannon_Decrypt(t *testing.T) {
	assert := assert.New(t)
	ciphertext := []byte{0x9b, 0x1a, 0x9f, 0xd4, 0xd9, 0x80, 0x33, 0xf0, 0xde, 0x6d, 0xd1}
	s := ShannonNew(key)
	s.Decrypt(ciphertext)
	assert.Equal([]byte("Hello World"), ciphertext)
}

func TestShannon_Finish(t *testing.T) {
	assert := assert.New(t)
	plaintext := []byte("Hello World")
	s := ShannonNew(key)
	s.Encrypt(plaintext)
	mac := make([]byte, n)
	s.Finish(mac)
	assert.Equal([]byte{0x98, 0xba, 0xb, 0xf8, 0xee, 0xbd, 0xc6, 0x2a, 0x4b, 0x4c, 0xe2, 0x69, 0x1, 0x25, 0xf8, 0x35}, mac)
}

func TestShannon_CheckMac(t *testing.T) {
	assert := assert.New(t)
	ciphertext := []byte{0x9b, 0x1a, 0x9f, 0xd4, 0xd9, 0x80, 0x33, 0xf0, 0xde, 0x6d, 0xd1}
	s := ShannonNew(key)
	s.Decrypt(ciphertext)
	err := s.CheckMac([]byte{0x98, 0xba, 0xb, 0xf8, 0xee, 0xbd, 0xc6, 0x2a, 0x4b, 0x4c, 0xe2, 0x69, 0x1, 0x25, 0xf8, 0x35})
	assert.Nil(err)
}


